Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
**********************************************************************************************************************************************************
class Solution {
    public int maxProduct(int[] nums) {
        
        int m=1;
        int ans=Integer.MIN_VALUE;
        
        for(int i=0;i<nums.length;i++)
        {
            m*=nums[i];
            ans=Math.max(m,ans);
            if(m==0) m=1;
        }
        int n=1;
         for(int i=nums.length-1;i>0;i--)
        {
            n*=nums[i];
            ans=Math.max(n,ans);
            if(n==0) n=1;
        }
        return ans;
        
    }
}
**********************************************************************************************************************************************************
TC: O(N)
SC:O(1)
