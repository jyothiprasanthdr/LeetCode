Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

****************************************************************************************************************************************
class Solution {
    public int majorityElement(int[] nums) {
        
        int major=nums[0], count=1;
        
        for(int i=1;i<nums.length;i++)
        {
            if(count==0) // new element offset
            {
                count++;
                major=nums[i];
            }
            else if(nums[i]==major) // increase the frequency
                count++;
            else
                count--;  // decrease the frequency
        }
        return major;
    }
}

************************ SOLUTION 2 ***************************

class Solution {
    public int majorityElement(int[] nums) {
        
        Map<Integer,Integer> map=new HashMap<>();
        
        for(int i=0; i<nums.length;i++)
        {
            if(!map.containsKey(nums[i]))
                map.put(nums[i],1);
            else
                map.put(nums[i],map.get(nums[i])+1);
        }
        int max=1,key=1;
        for(Map.Entry<Integer,Integer> ele: map.entrySet())
        {
            if(max<ele.getValue())
            {  
                max=ele.getValue();
                key=ele.getKey();
                
            }
        }
        return key ;
    }
}


****************************************************************************************************************************************

Notes:
Use Hashmap but runtime is little bit high

Second approach: Use frequency concept to find the majority of the element in the array.
