Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105

******************************************************************************************************************************************************
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
    //Two pointer approach   

List<List<Integer>> res=new LinkedList();

Arrays.sort(nums);

for(int i=0;i<nums.length;i++)
{

    if(nums[i]>0)
        return res;

    // skipping the repeated values
     if( i>0 && nums[i]==nums[i-1])
        continue;

      int left=i+1;
      int right= nums.length-1;
      
      while(right>left)
      {
        int sum=nums[i]+nums[left]+nums[right];

        if(sum<0)
            left++;
        else if(sum>0)
            right--;
        else{

            List<Integer> list=new ArrayList();

            list.add(nums[i]);
            list.add(nums[left]);
            list.add(nums[right]);
            res.add(list);
            
            // skipping the repeated values here
            while( right>left && nums[left]==nums[left+1])
                left++;
               
            // skipping the repeated values here   
            while(right>left && nums[right]==nums[right-1])
                right--;

            left++;
            right--; 

        } 
             
      }


}
        return res;
	}
}
******************************************************************************************************************************************************
