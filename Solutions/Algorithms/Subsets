Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
**********************************************************************************************************************************************************
class Solution {
       
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res=new ArrayList<>();
   helper(nums,0,new ArrayList<Integer>(),res);
        
        return res;
    }
    
    public void helper(int[] nums, int index, List<Integer> subs,List<List<Integer>> res)
    {
        
        res.add(new ArrayList<Integer>(subs));
        
        for(int i=index;i<nums.length;i++)
        {
            subs.add(nums[i]);
            helper(nums, i+1,subs,res);
            subs.remove(subs.size()-1);
        }
        
    }
}
**********************************************************************************************************************************************************
TC:O(N^target). N-no of elements in candidates
SC:O(target)
