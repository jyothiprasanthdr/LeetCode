
Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

*************************************************************************************************************************************************************
class Solution {
    public int lengthOfLIS(int[] nums) {
       
        List<Integer> dp=new ArrayList();
     //  int dp[]=new int[nums.length];
        
       dp.add(nums[0]);

        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]>dp.get(dp.size()-1))
            {
                dp.add(nums[i]);
                
            }
            else
            {
                int pos=BSearch(dp,0,dp.size()-1,nums[i]);
                dp.set(pos,nums[i]);
            }
            
        }
        
        return dp.size();
      
    }
    
    public int BSearch(List<Integer> dp,int low,int high,int target)
    {
        while(high>=low)
        {
            int mid=low+(high-low)/2;
            if(dp.get(mid)==target)
                return mid;
            else if(dp.get(mid)<target)
                low=mid+1;
            else if(dp.get(mid)>target)
                high=mid-1;
            
           
        }
        
         return low;
        
    }  
    }
**********************************************************************************************************************************************************\
TC: O(nlogn)
SC: O(n)
