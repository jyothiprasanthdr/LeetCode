Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 

Constraints:

The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz
 

Follow up: Could you do this in one pass?

******************************************************** SOLUTION 1 *****************************************************************
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null || head.next==null)
            return null;
        
        ListNode slow=head;
        ListNode fast=head;
        while(n>0)
        {
            fast=fast.next;
            n--;
        }
        if(fast==null)
            return head.next; 
        while(fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next;
        }
        
        slow.next=slow.next.next;
        return head;
        
        
    }
}
******************************************************************SOLUTION 2 *********************************************************************


LENGTH - K - 1 WILL GIVE YOU THE PREVIOUS NODE OF K'TH NODE.

K==LENGTH, THEN NEED TO REMOVE THE FIRST NODE, SO JUST HEAD=HEAD.NEXT;

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int l=leng(head);
        if(n>l)return null;
        if(n==l)return head.next;
        int c=0;
        ListNode t=head;
        while(c<l-n-1){
            c++;
            t=t.next;
        }
        t.next=t.next.next;
        return head;
    }
    
    int leng(ListNode head){
        int l=0;
        ListNode t=head;
        while(t!=null){
            l++;
            t=t.next;
        }
        return l;
    }
}
********************************************************************************************************************************************
