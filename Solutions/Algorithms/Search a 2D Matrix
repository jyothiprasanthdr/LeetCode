Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 
**********************************************************************************************************************************************************
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        int row=matrix.length;
        int col=matrix[0].length;
        
        int left=0;
        int right=row*col-1;    
        
        while(left<= right)
        {
            
            int mid= left + (right-left)/2;
            int midmatrix=matrix[mid/col][mid%col];
            
            if(midmatrix==target)
                return true;
            else if(midmatrix< target)
                left=mid+1;
            else if(midmatrix> target)
                right=mid-1;  
        }
        return false;
        
    }
}
TC: O(logn)




***************************************Solution 2********************************
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        
        if(matrix == null || matrix.length < 1 || matrix[0].length <1) {
            return false;
        }
        
        int r=0, c=matrix[0].length-1;
        while(r<matrix.length && c>=0)
        {
            if(matrix[r][c]==target)
                return true;
            else if( matrix[r][c]<target)
                r++;
            else if(matrix[r][c]>target)
                c--;
        }
        
        return false;
        
    }
}

TC: O(m+n)
**********************************************************************************************************************************************************
