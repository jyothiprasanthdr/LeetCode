Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

**********************************************************************************************************************************************************
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res=new ArrayList<>();
        if ((candidates.length == 0) || (target == 0)) {
            return res;
        }
        Arrays.sort(candidates);
        helper(res, candidates,target, new ArrayList(),0,0);
        return res;
        
    }
    
    
    public void helper(List<List<Integer>> res, int[] nums, int target, List<Integer> list, int index,int sum)
    {
       if (sum==target) {
            res.add(new ArrayList<Integer>(list));
        }
        else
        {
            for(int i=index; i< nums.length;i++)
            {
                if(i> index && nums[i]==nums[i-1])
                    continue;
                
                if(sum+nums[i]<=target)
                {
                    sum+=nums[i];
                    list.add(nums[i]);
                    helper(res,nums,target, list,i+1,sum);
                    sum-=nums[i];
                    list.remove(list.size()-1);
                }
            }
        }
  
    }
   
}
**********************************************************************************************************************************************************
N- size of the array
TC: O(2^N)
SC:O(N)

